Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-09-24T09:56:05+02:00

====== security ======
Created Thursday 24 September 2015

In [[SpringSecurity's]] expression based access control 'hasPermission' is finest mechanism to regulate access. See also PermissionEvaluator.

let out login() config and add [[UsernamePasswordAuthenticationFilter]] bean to enable formless login, add logout config, configure them to use http status success handler for rest-style login and logout

SecurityExpressionRoot
RequestCacheFilter
SessionManagementFilter
SecurityContextHolder
SecurityContextPersistenceFilter
[[HttpSessionSecurityContextRepository]]

[[/users/{user}]] [[AntPathMatcher]] java doc

1) [[AuthenticationManagerBuilder]] to [[UserDetailService]] (with PasswordEncoder)
2) [[UserCache]] on [[AbstractUserDetailsAuthenticationProvider]]
3) [[WebAuthenticationDetails]] is a map like container
4) org.springframework.security.core.userdetails.User has 4 flags indicating account and password status
	4.1) [[DefaultPreAuthenticationChecks]] tests on 3 flags
	4.2) [[DefaultPostAuthenticationChecks]] tests on 1 flag - if credentials have expired
5) [[AuthenticationEventPublisher]] publishes the authentication result (e.g. UsernamePasswordAuthenticationToken) (AbstractAuthenticationProcessingFilter)
6) [[SavedRequestAwareAuthenticationSuccessHandler]] does the redirect after successful authentication (default to saved request)
7) SessionAuthenticationStrategy: enable things like session-fixation attack prevention or to control the number of simultaneous sessions a principal may have.
8) [[AccountStatusException]]
9)@EventListener
	public void authenticationFailed(AuthenticationFailureBadCredentialsEvent event)


[[ThreadLocalSecurityContextHolderStrategy]] getContext returns existing or an empty context. Read java DOC!!!

<!DOCTYPE html>
<html>
	<head>
		<sec:csrfMetaTags/>
	</head>
	<body>
	</body>
</html>

<!DOCTYPE html>
<html class="no-js">
	<head>
		<meta name="_csrf_parameter" content="_csrf" />
		<meta name="_csrf_header" content="X-CSRF-TOKEN" />
		<meta name="_csrf" content="e62835df-f1a0-49ea-bce7-bf96f998119c" />
	</head>
	<body>
	</body>
</html>

var header = $("meta[name='_csrf_header']").attr("content");
var token = $("meta[name='_csrf']").attr("content");
 
$.ajax({
	url: '/test',
	type: 'POST',
	beforeSend: function(xhr){
		xhr.setRequestHeader(header, token);
	},
	success: function(data) {
		console.log(data);
	},
	error: function (xhr, ajaxOptions, thrownError) {
		console.log(xhr.status + ": " + thrownError);
	}
});

header
X-CSRF-TOKEN
